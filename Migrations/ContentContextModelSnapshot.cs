// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyAppAPI.Context;

namespace MyAppApi.Migrations
{
    [DbContext(typeof(ContentContext))]
    partial class ContentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0-rc.1.20451.13");

            modelBuilder.Entity("MyAppAPI.Entities.AvatarEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AvatarImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCheckedIn")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AvatarEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvatarImgUrl = "avatar.jpg",
                            CurrentIP = "192.168.0.101",
                            IsCheckedIn = true,
                            JoinedOn = new DateTime(2020, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AvatarImgUrl = "avatar.jpg",
                            CurrentIP = "192.168.0.102",
                            IsCheckedIn = false,
                            JoinedOn = new DateTime(2020, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AvatarImgUrl = "avatar.jpg",
                            CurrentIP = "192.168.0.108",
                            IsCheckedIn = false,
                            JoinedOn = new DateTime(2020, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MyAppAPI.Entities.CardEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descritpion")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<bool>("Flag")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CardEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descritpion = "A story about a princess you travels the world on a mission to find dragons.",
                            Flag = false,
                            ImageUrl = "image.jpg",
                            Title = "Return of Golia",
                            UpdatedOn = new DateTime(2020, 10, 8, 14, 54, 51, 979, DateTimeKind.Local).AddTicks(6106),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descritpion = "A storm is approaching and this is just the beginning of something big.",
                            Flag = false,
                            ImageUrl = "image.jpg",
                            Title = "Thunder and Lighting",
                            UpdatedOn = new DateTime(2020, 10, 8, 14, 54, 51, 979, DateTimeKind.Local).AddTicks(7188),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("MyAppAPI.Entities.CommentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AvatarId")
                        .HasColumnType("int");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSuperUser")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("CardId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvatarId = 2,
                            CardId = 1,
                            IsSuperUser = false,
                            LastUpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "This is great work!!",
                            PostedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AvatarId = 2,
                            CardId = 1,
                            IsSuperUser = false,
                            LastUpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "You deserve a prize!!",
                            PostedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AvatarId = 3,
                            CardId = 1,
                            IsSuperUser = false,
                            LastUpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "I Totally agree!",
                            PostedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AvatarId = 1,
                            CardId = 1,
                            IsSuperUser = false,
                            LastUpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Nice lady character!",
                            PostedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AvatarId = 2,
                            CardId = 1,
                            IsSuperUser = false,
                            LastUpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Ya, Pretty cool lady",
                            PostedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            AvatarId = 3,
                            CardId = 1,
                            IsSuperUser = false,
                            LastUpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "This 3D lady is awesome!!",
                            PostedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CardId = 1,
                            IsSuperUser = true,
                            LastUpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "SuperUser - Thanks for the compliments!",
                            PostedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("MyAppAPI.Entities.LikeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AvatarId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<bool>("HasLiked")
                        .HasColumnType("bit");

                    b.Property<int>("LikedById")
                        .HasColumnType("int");

                    b.Property<int?>("LikedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("LikedId");

                    b.ToTable("LikeEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvatarId = 0,
                            CommentId = 1,
                            HasLiked = true,
                            LikedById = 2
                        });
                });

            modelBuilder.Entity("MyAppAPI.Entities.ReplyEntity", b =>
                {
                    b.Property<int>("AvatarId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int?>("AvatarEnityId")
                        .HasColumnType("int");

                    b.Property<bool>("HasReplied")
                        .HasColumnType("bit");

                    b.Property<int?>("ResponseId")
                        .HasColumnType("int");

                    b.Property<int?>("ResponseToCommentId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AvatarId", "CommentId");

                    b.HasIndex("AvatarEnityId");

                    b.HasIndex("CommentId");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("ReplyEntity");

                    b.HasData(
                        new
                        {
                            AvatarId = 3,
                            CommentId = 2,
                            HasReplied = true,
                            ResponseToCommentId = 2
                        },
                        new
                        {
                            AvatarId = 2,
                            CommentId = 5,
                            HasReplied = true,
                            ResponseToCommentId = 5
                        },
                        new
                        {
                            AvatarId = 3,
                            CommentId = 6,
                            HasReplied = true,
                            ResponseToCommentId = 5
                        },
                        new
                        {
                            AvatarId = 0,
                            CommentId = 7,
                            HasReplied = true,
                            ResponseToCommentId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("MyAppAPI.Entities.TagEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ByAvatarId")
                        .HasColumnType("int");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<string>("TagItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ByAvatarId");

                    b.HasIndex("CardId");

                    b.HasIndex("UserId");

                    b.ToTable("TagEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ByAvatarId = 3,
                            CardId = 1,
                            TagItem = "golia"
                        },
                        new
                        {
                            Id = 2,
                            ByAvatarId = 3,
                            CardId = 1,
                            TagItem = "zbrush"
                        },
                        new
                        {
                            Id = 3,
                            ByAvatarId = 2,
                            CardId = 1,
                            TagItem = "story"
                        },
                        new
                        {
                            Id = 4,
                            ByAvatarId = 1,
                            CardId = 1,
                            TagItem = "dragon"
                        },
                        new
                        {
                            Id = 5,
                            ByAvatarId = 2,
                            CardId = 2,
                            TagItem = "crystal"
                        });
                });

            modelBuilder.Entity("MyAppAPI.Entities.UserEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsSuperUser")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsSuperUser = true,
                            Name = "Justice"
                        });
                });

            modelBuilder.Entity("MyAppAPI.Entities.VoteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<bool>("UpVote")
                        .HasColumnType("bit");

                    b.Property<int>("VoteById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("VoteById");

                    b.ToTable("VoteEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1,
                            UpVote = true,
                            VoteById = 2
                        });
                });

            modelBuilder.Entity("MyAppAPI.Entities.CardEntity", b =>
                {
                    b.HasOne("MyAppAPI.Entities.UserEntity", "UserEntity")
                        .WithMany("Cards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("MyAppAPI.Entities.CommentEntity", b =>
                {
                    b.HasOne("MyAppAPI.Entities.AvatarEntity", "AvatarEntity")
                        .WithMany("Comments")
                        .HasForeignKey("AvatarId");

                    b.HasOne("MyAppAPI.Entities.CardEntity", "CardEntity")
                        .WithMany("Comments")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyAppAPI.Entities.UserEntity", "UserEntity")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("AvatarEntity");

                    b.Navigation("CardEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("MyAppAPI.Entities.LikeEntity", b =>
                {
                    b.HasOne("MyAppAPI.Entities.CommentEntity", "CommentEntity")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyAppAPI.Entities.AvatarEntity", "AvatarEntity")
                        .WithMany("Likes")
                        .HasForeignKey("LikedId");

                    b.Navigation("AvatarEntity");

                    b.Navigation("CommentEntity");
                });

            modelBuilder.Entity("MyAppAPI.Entities.ReplyEntity", b =>
                {
                    b.HasOne("MyAppAPI.Entities.AvatarEntity", "AvatarEnity")
                        .WithMany("Replies")
                        .HasForeignKey("AvatarEnityId");

                    b.HasOne("MyAppAPI.Entities.CommentEntity", "Reply")
                        .WithMany("Replies")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyAppAPI.Entities.CommentEntity", "ResponseComment")
                        .WithOne("Response")
                        .HasForeignKey("MyAppAPI.Entities.ReplyEntity", "ResponseId");

                    b.HasOne("MyAppAPI.Entities.UserEntity", "UserEntity")
                        .WithMany("Replies")
                        .HasForeignKey("UserId");

                    b.Navigation("AvatarEnity");

                    b.Navigation("Reply");

                    b.Navigation("ResponseComment");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("MyAppAPI.Entities.TagEntity", b =>
                {
                    b.HasOne("MyAppAPI.Entities.AvatarEntity", "AvatarEntity")
                        .WithMany("TagEntities")
                        .HasForeignKey("ByAvatarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyAppAPI.Entities.CardEntity", "CardEntity")
                        .WithMany("Tags")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyAppAPI.Entities.UserEntity", "UserEntity")
                        .WithMany("Tags")
                        .HasForeignKey("UserId");

                    b.Navigation("AvatarEntity");

                    b.Navigation("CardEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("MyAppAPI.Entities.VoteEntity", b =>
                {
                    b.HasOne("MyAppAPI.Entities.CardEntity", "CardEntity")
                        .WithMany("UpVotes")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyAppAPI.Entities.AvatarEntity", "AvatarEntity")
                        .WithMany("UpVotes")
                        .HasForeignKey("VoteById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvatarEntity");

                    b.Navigation("CardEntity");
                });

            modelBuilder.Entity("MyAppAPI.Entities.AvatarEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Replies");

                    b.Navigation("TagEntities");

                    b.Navigation("UpVotes");
                });

            modelBuilder.Entity("MyAppAPI.Entities.CardEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Tags");

                    b.Navigation("UpVotes");
                });

            modelBuilder.Entity("MyAppAPI.Entities.CommentEntity", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Replies");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("MyAppAPI.Entities.UserEntity", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Comments");

                    b.Navigation("Replies");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
